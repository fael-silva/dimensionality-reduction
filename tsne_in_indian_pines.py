# -*- coding: utf-8 -*-
"""TSNE in Indian Pines.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/13AhZRmQFnkbQiWqPsJb1bmxbpZVcLwU8

https://github.com/olekscode/Examples-PCA-tSNE/blob/master/Python/Visualizing%20Iris%20Dataset%20using%20PCA%20and%20t-SNE.ipynb
"""

# Commented out IPython magic to ensure Python compatibility.
# %matplotlib inline
import pandas as pd
from sklearn.datasets import load_iris
from sklearn.decomposition import PCA
from sklearn.manifold import TSNE

import matplotlib.pyplot as plt
from matplotlib.colors import ListedColormap
from mpl_toolkits.mplot3d import Axes3D
import seaborn as sns

sns.set()
sns.set(rc={"figure.figsize": (10, 8)})

PALETTE = sns.color_palette('deep', n_colors=3)
CMAP = ListedColormap(PALETTE.as_hex())

RANDOM_STATE = 42

dataset = pd.read_csv("Complete_Data_.csv")

dataset.head(20)

features = ['px1','px2','px3','px4','px5','px6','px7','px8','px9','px10',
            'px11','px12','px13','px14','px15','px16','px17','px18','px19','px20',
            'px21','px22','px23','px24','px25','px26','px27','px28','px29','px30',
            'px31','px32','px33','px34','px35','px36','px37','px38','px39','px40',
            'px41','px42','px43','px44','px45','px46','px47','px48','px49','px50',
            'px51','px52','px53','px54','px55','px56','px57','px58','px59','px60',
            'px61','px62','px63','px64','px65','px66','px67','px68','px69','px70',
            'px71','px72','px73','px74','px75','px76','px77','px78','px79','px80',
            'px81','px82','px83','px84','px85','px86','px87','px88','px89','px90',
            'px91','px92','px93','px94','px95','px96','px97','px98','px99','px100',
            'px101','px102','px103','px104','px105','px106','px107','px108','px109','px110',
            'px111','px112','px113','px114','px115','px116','px117','px118','px119','px120',
            'px121','px122','px123','px124','px125','px126','px127','px128','px129','px130',
            'px131','px132','px133','px134','px135','px136','px137','px138','px139','px140',
            'px141','px142','px143','px144','px145','px146','px147','px148','px149','px150',
            'px151','px152','px153','px154','px155','px156','px157','px158','px159','px160',
            'px161','px162','px163','px164','px165','px166','px167','px168','px169','px170',
            'px171','px172','px173','px174','px175','px176','px177','px178','px179','px180',
            'px181','px182','px183','px184','px185','px186','px187','px188','px189','px190',
            'px191','px192','px193','px194','px195','px196','px197','px198','px199','px200']
target = 'target'

def plot_ip_2d(x, y, title, xlabel="1st eigenvector", ylabel="2nd eigenvector"):
    sns.set_style("darkgrid")
    
    plt.scatter(x, y,
        c=dataset['target'],
        cmap=CMAP,
        s=70)
    
    plt.title(title, fontsize=20, y=1.03)

    plt.xlabel(xlabel, fontsize=16)
    plt.ylabel(ylabel, fontsize=16)

def plot_ip_3d(x, y, z, title):
    sns.set_style('whitegrid')
    
    fig = plt.figure(1, figsize=(8, 6))
    ax = Axes3D(fig, elev=-150, azim=110)
    
    ax.scatter(x, y, z,
               c=dataset['target'],
               cmap=CMAP,
               s=40)
    
    ax.set_title(title, fontsize=20, y=1.03)
    
    fsize = 14
    ax.set_xlabel("1st eigenvector", fontsize=fsize)
    ax.set_ylabel("2nd eigenvector", fontsize=fsize)
    ax.set_zlabel("3rd eigenvector", fontsize=fsize)
    
    ax.w_xaxis.set_ticklabels([])
    ax.w_yaxis.set_ticklabels([])
    ax.w_zaxis.set_ticklabels([])

plot_ip_2d(
    x = dataset['px1'],
    y = dataset['px2'],
    title = 'Plotting first two components',
    xlabel = 'px1',
    ylabel = 'px2')

pca = PCA(n_components=2)
points = pca.fit_transform(dataset[features])

plot_ip_2d(
    x = points[:,0],
    y = points[:,1],
    title = 'Indian Pines dataset visualized with PCA')

tsne = TSNE(n_components=2, n_iter=1000, random_state=RANDOM_STATE)
points = tsne.fit_transform(dataset[features])

plot_ip_2d(
    x = points[:, 0],
    y = points[:, 1],
    title = 'Indian Pines dataset visualized with t-SNE')

pca = PCA(n_components=3)
points = pca.fit_transform(dataset[features])

plot_ip_3d(
    x = points[:,0],
    y = points[:,1],
    z = points[:,2],
    title = "Indian Pines dataset visualized with PCA")

tsne = TSNE(n_components=3, n_iter=5000, random_state=RANDOM_STATE)
points = tsne.fit_transform(dataset[features])

plot_ip_3d(
    x = points[:,0],
    y = points[:,1],
    z = points[:,2],
    title = "Indian Pines dataset visualized with t-SNE")