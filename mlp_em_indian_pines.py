# -*- coding: utf-8 -*-
"""MLP em Indian Pines.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1U1PsRn5_0dnw2GF2I8Ez0ZgrEzngSlIZ

https://www.youtube.com/watch?v=BmtaP3r1dEA
"""

import pandas as pd

df = pd.read_csv('https://raw.githubusercontent.com/syamkakarla98/Dimensionality-reduction-and-classification-on-Hyperspectral-Images-Using-Python/master/Complete_Data_.csv')
df.head()

df.info()

"""# Base de Treino e de Teste"""

entradas = df[['px1','px2','px3','px4','px5','px6','px7','px8','px9','px10',
            'px11','px12','px13','px14','px15','px16','px17','px18','px19','px20',
            'px21','px22','px23','px24','px25','px26','px27','px28','px29','px30',
            'px31','px32','px33','px34','px35','px36','px37','px38','px39','px40',
            'px41','px42','px43','px44','px45','px46','px47','px48','px49','px50',
            'px51','px52','px53','px54','px55','px56','px57','px58','px59','px60',
            'px61','px62','px63','px64','px65','px66','px67','px68','px69','px70',
            'px71','px72','px73','px74','px75','px76','px77','px78','px79','px80',
            'px81','px82','px83','px84','px85','px86','px87','px88','px89','px90',
            'px91','px92','px93','px94','px95','px96','px97','px98','px99','px100',
            'px101','px102','px103','px104','px105','px106','px107','px108','px109','px110',
            'px111','px112','px113','px114','px115','px116','px117','px118','px119','px120',
            'px121','px122','px123','px124','px125','px126','px127','px128','px129','px130',
            'px131','px132','px133','px134','px135','px136','px137','px138','px139','px140',
            'px141','px142','px143','px144','px145','px146','px147','px148','px149','px150',
            'px151','px152','px153','px154','px155','px156','px157','px158','px159','px160',
            'px161','px162','px163','px164','px165','px166','px167','px168','px169','px170',
            'px171','px172','px173','px174','px175','px176','px177','px178','px179','px180',
            'px181','px182','px183','px184','px185','px186','px187','px188','px189','px190',
            'px191','px192','px193','px194','px195','px196','px197','px198','px199','px200']]

saidas = df['target']

from sklearn.model_selection import train_test_split

# divide a base em bases: de treino e de teste
x_treino, x_teste, y_treino, y_teste = train_test_split(entradas, saidas, test_size=0.3)

"""# Treinamento"""

# importa a biblioteca
from sklearn.neural_network import MLPClassifier

# cria um objeto de uma RNA MLP para classificação
mlp = MLPClassifier(
    verbose=True, # mostra os erros
    hidden_layer_sizes=(49, 44, 48, 57, 58, 48, 61, 42, 38),#O i-ésimo elemento representa o número de neurônios na i-ésima camada oculta. 
    max_iter=5000, # máximo de iterações
    tol=0.00005, # limiar de erro
    activation='relu', # função de unidade linear retificada, retorna f (x) = max (0, x) 
    learning_rate_init=0.005, # taxa de aprendizagem
    learning_rate='adaptive', #'adaptive' mantém a taxa de aprendizagem constante para 'learning_rate_init' enquanto a perda de treinamento continua diminuindo.
    solver='adam' # método para o ajuste de pesos,  otimizador baseado em gradiente estocástico
)

# executa o treinamento para as entradas e saídas
mlp.fit(x_treino, y_treino)

"""# Matriz de Confusão e Relatório"""

#matriz de confusão
from sklearn.metrics import confusion_matrix, classification_report
from sklearn.metrics import classification_report, confusion_matrix, accuracy_score

# para o treino
classificacao = mlp.predict(x_treino)
#print(confusion_matrix(y_treino, classificacao))
#print(confusion_matrix(y_treino, classificacao))

!pip install -q scikit-plot

import scikitplot as skplt

skplt.metrics.plot_confusion_matrix(
    y_treino, 
    classificacao,
    figsize=(12,12));

print(classification_report(y_treino, classificacao))

# para o teste
classificacao = mlp.predict(x_teste)

#print(confusion_matrix(y_teste, classificacao))

import scikitplot as skplt

skplt.metrics.plot_confusion_matrix(
    y_teste, 
    classificacao,
    figsize=(12,12));

print(classification_report(y_teste, classificacao))

bol = y_teste!=classificacao
y_teste[bol]

classificacao[bol]

"""# Salva o modelo

https://scikit-learn.org/stable/modules/model_persistence.html
"""

from joblib import dump, load

dump(mlp, 'mlp.joblib')